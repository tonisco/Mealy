datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id         String   @id @default(cuid())
    full_name  String
    email      String   @unique
    password   String
    phone      String
    country    String
    state      String
    city       String
    street     String
    lat        Decimal
    lng        Decimal
    created_at DateTime @default(now())

    orders Order[]
    basket Basket?
}

model Restaurant {
    id             String   @id @default(cuid())
    name           String   @unique
    logo           String
    phone          String
    user_full_name String
    email          String   @unique
    password       String
    ratings        Decimal
    opening_time   DateTime
    closing_time   DateTime
    country        String
    state          String
    city           String
    street         String
    lat            Decimal
    lng            Decimal
    created_at     DateTime @default(now())

    foods  Food[]
    orders Order[]
    basket Basket?
}

model Courier {
    id         String   @id @default(cuid())
    full_name  String
    email      String   @unique
    password   String
    country    String
    state      String
    city       String
    street     String
    lat        String
    lng        String
    created_at DateTime @default(now())
    orders     Order[]
}

model Food {
    id            String      @id @default(cuid())
    name          String      @unique
    image         String
    description   String
    price         Decimal
    restaurant    Restaurant  @relation(fields: [resturantId], references: [id])
    resturantId   String
    created_at    DateTime    @default(now())
    updated_at    DateTime    @updatedAt
    basketFood    BasketFood? @relation(fields: [basketFoodId], references: [id])
    basketFoodId  String?
    foodOrdered   FoodOrdered @relation(fields: [foodOrderedId], references: [id])
    foodOrderedId String      @unique
}

model BasketFood {
    id       String @id @default(cuid())
    quantity Int
    food     Food[]
    basket   Basket @relation(fields: [basketId], references: [id])
    basketId String
}

model Basket {
    id          String       @id @default(cuid())
    user        User         @relation(fields: [userId], references: [id])
    userId      String       @unique
    resturant   Restaurant   @relation(fields: [resturantId], references: [id])
    resturantId String       @unique
    basketFood  BasketFood[]
}

model FoodOrdered {
    id       String @id @default(cuid())
    quantity Int
    food     Food?
    order    Order  @relation(fields: [orderId], references: [id])
    orderId  String
}

model Order {
    id          String        @id @default(cuid())
    totalPrice  Decimal
    isPaid      Boolean
    created_at  DateTime      @default(now())
    status      Status        @default(New)
    payment     Payment
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    courier     Courier       @relation(fields: [courierId], references: [id])
    courierId   String
    resturant   Restaurant    @relation(fields: [resturantId], references: [id])
    resturantId String
    foodOrdered FoodOrdered[]
}

enum Status {
    New
    Cooking
    ReadyForPickUp
    OnRoute
    Delivered
}

enum Payment {
    Card
    Ondelivery
}
