// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  fullName  String
  email     String    @unique
  phone     String
  country   String
  state     String
  city      String
  street    String
  userAuth  UserAuth?
  lat       String?
  lng       String?
  createdAt DateTime  @default(now())

  orders Order[]
  basket Basket?
}

model UserAuth {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique
  password String?
  OTP      String?
}

model Restaurant {
  id             String          @id @default(cuid())
  name           String          @unique
  logo           String
  phone          String
  userFullName   String
  email          String          @unique
  restaurantAuth RestaurantAuth?
  ratings        Float?
  usedData       Boolean?        @default(false)
  openingTime    String
  closingTime    String
  country        String
  state          String
  city           String
  street         String
  lat            String?
  lng            String?
  created_at     DateTime        @default(now())

  foods  Food[]
  orders Order[]
  basket Basket?
}

model RestaurantAuth {
  id           String     @id @default(cuid())
  restaurant   Restaurant @relation(references: [id], fields: [restaurantId], onDelete: Cascade)
  restaurantId String     @unique
  password     String?
  OTP          String?
}

model Courier {
  id          String       @id @default(cuid())
  fullName    String
  email       String       @unique
  courierAuth CourierAuth?
  country     String
  state       String
  phone       String
  city        String
  street      String
  lat         String?
  lng         String?
  created_at  DateTime     @default(now())
  orders      Order[]
}

model CourierAuth {
  id        String  @id @default(cuid())
  courier   Courier @relation(fields: [courierId], references: [id], onDelete: Cascade)
  courierId String  @unique
  password  String?
  OTP       String?
}

model Food {
  id           String        @id @default(cuid())
  name         String
  image        String
  description  String
  type         String
  price        Float
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  basketFood   BasketFood[]
  foodOrdered  FoodOrdered[]
}

model BasketFood {
  id       String @id @default(cuid())
  quantity Int
  food     Food[]
  basket   Basket @relation(fields: [basketId], references: [id], onDelete: Cascade)
  basketId String
}

model Basket {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String       @unique
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String       @unique
  basketFood   BasketFood[]
}

model FoodOrdered {
  id             String @id @default(cuid())
  quantity       Int
  food           Food[]
  order          Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  foodTotalPrice Float

  orderId String
}

model Order {
  id           String        @id @default(cuid())
  totalPrice   Float
  isPaid       Boolean
  created_at   DateTime      @default(now())
  status       Status        @default(New)
  payment      Payment
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  courier      Courier       @relation(fields: [courierId], references: [id])
  courierId    String
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  foodOrdered  FoodOrdered[]
}

enum Status {
  New
  Cooking
  ReadyForPickUp
  OnRoute
  Delivered
}

enum Payment {
  Card
  Ondelivery
}
